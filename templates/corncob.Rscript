#!/usr/bin/env Rscript

# Get the arguments passed in by the user

library(tidyverse)
library(corncob)
library(parallel)

main <- function(){

    ## By default, use 10% of the available memory to read in data
    connectionSize = 100000 * ${task.memory.toMega()}
    print("Using VROOM_CONNECTION_SIZE =")
    print(connectionSize)
    Sys.setenv("VROOM_CONNECTION_SIZE" = format(connectionSize, scientific=F))

    numCores = ${task.cpus}

    ##  READCOUNTS CSV should have sample IDs in the first col
    ##  METADATA CSV should have a column `specimen` (which matches up with the first column from
    ##         the recounts file), and additional columns with covariates matching `formula`

    ##  corncob analysis (coefficients and p-values) are written to OUTPUT CSV on completion

    print("Reading in ${metadata_csv}")
    metadata <- read.csv("${metadata_csv}", sep=",")
    metadata <- tibble::column_to_rownames(metadata, names(metadata)[1])
    print(head(metadata))
    print(dim(metadata))

    print("Reading in ${readcounts_csv_gz}")
    counts <- read.csv("${readcounts_csv_gz}", sep=",")
    counts <- tibble::column_to_rownames(counts, "specimen")
    print(head(counts))
    print(dim(counts))

    # If there aren't enough samples passing the threshold, stop gracefully
    if(dim(counts)[1] <= 2){
        print("Not enough samples to run corncob -- stopping")
        return()
    }

    # Subset the metadata to have the same rows and order as counts
    print("Aligning sample order between metadata and counts")
    metadata <- metadata[rownames(counts),]

    # Drop any rows from the metadata which lack a value in the formula string
    print(sprintf("Dropping rows from metadata which lack a value in the formula string: %s", formula))
    for(cname in strsplit("${params.formula}", "\\+ ")[[1]]){
        if(cname %in% colnames(metadata)){
            metadata <- metadata[!is.na(metadata[[cname]]),]
        }
    }

    # Subset the counts to only have the rows which were retained in the metadata
    print("Aligning sample order between metadata and counts")
    counts <- counts[rownames(metadata),]

    # If the user added the --incl_unaligned flag, include the unaligned reads
    if("${params.incl_unaligned}" != "false"){
        print("Including unaligned reads in the analysis")
        # Add the 'unaligned_reads' column from metadata to the counts table
        counts\$unaligned_reads <- metadata\$genes.unaligned_reads
        print(head(counts))
    }

    #### Run the differentialAbundance analysis
    da <- differentialTest(
        data = counts,
        formula = ~ ${params.formula},
        phi.formula = ~ ${params.formula},
        formula_null = ~ 1,
        phi.formula_null = ~ ${params.formula},
        sample_data = metadata,
        taxa_are_rows = FALSE,
        test = "Wald",
        full_output = TRUE
    )

    # Rename the outputs as a table
    output <- do.call(
        rbind,
        lapply(
            seq_along(da\$all_models),
            function(i){
                if("coefficients" %in% names(da\$all_models[[i]])){
                    coef <- da\$all_models[[i]]\$coefficients
                    return(
                        coef
                            %>% as_tibble
                            %>% mutate(
                                "parameter" = coef %>% row.names,
                                "feature" = colnames(counts)[i]
                            )
                            %>% rename(
                                "estimate" = Estimate,
                                "std_error" = `Std. Error`,
                                "p_value" = `Pr(>|t|)`
                            )
                            %>% select(-`t value`)
                        )
                } else {
                    return(data.frame())
                }
                }
            )
        )

    print(sprintf("Writing out %s rows to corncob.results.csv", nrow(output)))
    write_csv(output, "corncob.results.csv")
    print("Done")
}

main()