#!/usr/bin/env python3

# Import the menu-driven-figure library
from menu_driven_figure.app import MenuDrivenFigure

import argparse
from direct_redis import DirectRedis
from functools import lru_cache
import json
import logging
import numpy as np
import os
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from skbio import DistanceMatrix
from skbio.tree import nj


####################
# HELPER FUNCTIONS #
####################

def remove_genome_file_ext(fp):
    for ext in ['.gz', '.fna', '.fasta', '.fa']:
        if fp.endswith(ext):
            fp = fp[:-len(ext)]
    return fp

def read_data(args):
    """Read in the data needed to render the heatmap."""

    # Get the logger
    logger = logging.getLogger('gig-map')

    # Return data formatted as a dict
    output = dict()

    # The default annotations available for each gene are the
    # alignment identity and coverage
    output["available_gene_annotations"] = [
        dict(
            label="Alignment Identity",
            value="pident"
        ),
        dict(
            label="Alignment Coverage",
            value="coverage"
        )
    ]

    # By default, there are no additional labels to apply to the genes
    output["available_gene_labels"] = []

    # Open the redis store for reading
    logger.info(f"Connecting to redis at {args['host']}:{args['port']}")
    with DirectRedis(host=args['host'], port=args['port']) as r:

        # Read in the alignment information in long format
        output["alignments"] = r.get("alignments")
        assert output["alignments"] is not None

        # Get the mapping of genome_ix to filenames
        output["genome_ix"] = r.get("genome_ix")
        assert output["genome_ix"] is not None

        # Get the mapping of gene_ix to strings
        output["gene_ix"] = r.get("gene_ix")
        assert output["gene_ix"] is not None

        # Format a wide table with the alignments,
        #  once each for pident, coverage, and description
        for value_key in ['pident', 'coverage', 'description']:
            output[
                f"alignments_{value_key}"
            ] = output[
                "alignments"
            ].pivot(
                index="genome_ix",
                columns="gene_ix",
                values=value_key
            ).rename(
                index=lambda genome_ix: output["genome_ix"][genome_ix],
                columns=lambda gene_ix: output["gene_ix"][gene_ix],
            )

        # Read in the pairwise genome distances, merging multiple shards
        output["distances"] = pd.concat(
            [
                r.get(redis_key)
                for redis_key in r.get("distances_keys")
            ]
        )

        # Read in the t-SNE coordinates
        output["tsne"] = r.get("tsne")

    # Read in the gene annotations, if any
    if args['gene_annotations'] is None:
        output["gene_annotations"] = None

    # If a table was provided
    else:
        # Read in the table
        logger.info(f"Reading from {args['gene_annotations']}")
        output["gene_annotations"] = pd.read_csv(args['gene_annotations'])

        # Make sure that there is a column named "gene_id"
        msg = "Gene annotation CSV must contain a column named 'gene_id'"
        msg = f"{msg} - found {'; '.join(output['gene_annotations'].columns.values)}"
        assert "gene_id" in output["gene_annotations"].columns.values, msg

        # Set the index of the table as 'gene_id'
        output["gene_annotations"].set_index('gene_id', inplace=True)

        # Add the other columns to the available gene annotations
        for col_name in output["gene_annotations"].columns.values:
            output["available_gene_annotations"].append(
                dict(
                    label=col_name,
                    value=col_name,
                )
            )

            # Also add those columns to the options available for labeling genes
            output["available_gene_labels"].append(
                dict(
                    label=col_name,
                    value=col_name,
                )
            )

    # By default, there are no additional labels to apply to the genomes
    output["available_genome_labels"] = []

    # Read in the genome annotations, if any
    if args['genome_annotations'] is None:
        output['genome_annotations'] = None

    # If a table was provided
    else:
        # Read in the table
        logger.info(f"Reading from {args['genome_annotations']}")
        output['genome_annotations'] = pd.read_csv(args['genome_annotations'])

        # Make sure that there is a column named "genome_id"
        msg = "Genome annotation CSV must contain a column named 'genome_id'"
        msg = f"{msg} - found {'; '.join(output['genome_annotations'] .columns.values)}"
        assert "genome_id" in output['genome_annotations'] .columns.values, msg

        # Set the index of the table as 'genome_id'
        output['genome_annotations'] .set_index('genome_id', inplace=True)

        # Add the other columns to the available genome annotations
        for col_name in output['genome_annotations'] .columns.values:

            # Add those columns to the options available for labeling genomes
            output["available_genome_labels"].append(
                dict(
                    label=col_name,
                    value=col_name,
                )
            )

    logger.info("Done reading all data")

    # Return data formatted as a dict
    return output


# Generate a neighbor-joining tree from a subset of genomes
def make_nj_tree(genome_list, dists_df):

    # Make sure that we have distances for every genome
    for genome_id in genome_list:
        msg = f"Could not find a distance for genome {genome_id}"
        msg = f"{msg} -- best performance for FASTA files ending with .fasta[.gz] or .fna[.gz]"
        assert genome_id in dists_df.index.values, msg

    # Subset the distance matrix to the genomes in the list
    subset_dists = dists_df.reindex(
        columns=genome_list,
        index=genome_list,
    )

    # Format the distances as expected by skbio
    dm = DistanceMatrix(subset_dists.values, genome_list)

    # Make a neighbor-joining tree
    tree = nj(dm)

    # Root at midpoint
    tree = tree.root_at_midpoint()

    # Assign x/y to create a DataFrame
    node_positions = CartesianTree(
        tree,
        y_offset=-0.5,
    )

    # Lastly, make a mapping from the filenames to the same filename without any underscores
    filename_mapping = {
        fn.replace("_", " "): fn
        for fn in genome_list
    }

    # Now make a new list, ordered by the node_positions, with the complete
    # filenames (including the underscores)
    node_positions.genome_order = list(map(
        filename_mapping.get,
        node_positions.genome_order
    ))

    # Return the layout of the tree
    return node_positions

def plot_heatmap(tables, node_positions, selections, data, xaxis='x', yaxis='y'):
    """Return a heatmap rendered from the gene DataFrame and the genome positions."""

    # Manipulate both the value and text DataFrames equivalently
    for k in ["values", "text"]:

        # Reorder the rows to match the tree
        tables[k] = tables[k].reindex( 
            index=node_positions.genome_order,
        )

    # If the user elected to label the genes by something other than their ID
    if selections["label-genes-by"] != "":

        # Function to rename genes
        def format_gene_id(gene_id):

            # Get the value
            gene_label = data[
                "gene_annotations"
            ][
                selections["label-genes-by"]
            ].get(gene_id)

            # If there is no value
            if gene_label is None:

                # Just show the gene ID
                return gene_id

            # If there is a value
            else:

                # Join together the gene ID and the annotated label,
                #  up to a maximum length
                return f"{gene_label} ({gene_id})"[
                    :selections["max-gene-label-len"]
                ]

        # Rename the columns of the DataFrame
        for k in ["values", "text"]:
            tables[k] = tables[k].rename(
                columns=format_gene_id
            )

    return go.Heatmap(
        x=list(tables["values"].columns.values),
        z=tables["values"].values,
        text=tables["text"].values,
        xaxis=xaxis,
        yaxis=yaxis,
        colorscale=selections["heatmap-colorscale"],
        showscale=False,
        hovertemplate="%{text}<extra></extra>",
    )

def plot_colorbar(
    min_val=0.,
    max_val=100.,
    colorscale="blues",
    color_genes_by="pctid",
    label="Percent Identity",
    xaxis="x3",
    yaxis="y2",
):
    """Render a colorbar as a heatmap on a dedicated axis."""

    value_list = [
        v
        for v in np.linspace(
            min_val, max_val, num=100
        )
    ]

    return go.Heatmap(
        y=[label],
        x=value_list,
        z=[value_list],
        xaxis=xaxis,
        yaxis=yaxis,
        colorscale=colorscale,
        showscale=False,
        hovertemplate="%{z}<extra></extra>",
    )

def plot_tree(node_positions, selections, data, xaxis='x', yaxis='y'):
    """Return a Plotly trace rendered from a skbio tree."""

    # If the user decided to label the genomes
    if selections["label-genomes-by"] != "":

        # Replace the values in the 'name' column of the DataFrame used for plotting
        node_positions.df = node_positions.df.replace(
            to_replace=dict(
                name=data[
                    "genome_annotations"
                ][
                    selections["label-genomes-by"]
                ].to_dict()
            )
        )

    # Return a ScatterGL
    yield go.Scattergl(
        name="Neighbor Joining Tree",
        showlegend=False,
        mode="lines",
        x=node_positions.x_coords(),
        y=node_positions.y_coords(),
        text=node_positions.text(),
        hoverinfo="text",
        xaxis=xaxis,
        yaxis=yaxis,
    )

    # Also show a set of dotted lines extending each tip
    yield go.Scattergl(
        showlegend=False,
        mode="lines",
        x=node_positions.extension_x_coords(),
        y=node_positions.extension_y_coords(),
        hoverinfo="skip",
        line=dict(
            color="black",
            dash="dot",
            width=1,
        ),
        xaxis=xaxis,
        yaxis=yaxis,
    )


class CartesianTree:

    def __init__(self, tree, y_offset=0, x=0):

        # Set up each position as a dict in a list
        # keys will be name, x, y, and parent
        self.positions = []

        # Assign the root, and then recurse down to the tips
        self.add_clade(tree, y_offset=y_offset, x=x)

        # Set up a DataFrame with the coordinates
        self.df = pd.DataFrame(self.positions)

        # Save the list of genome positions from the tree layout
        self.genome_order = self.df.query("is_leaf").set_index(
            "name"
        )[
            "y"
        ].sort_values().index.values

    def x_coords(self):
        """Return a list of x-coordinates to use for plotting the tree."""

        # Format is a list with each node and its parent, separated by NaN values
        return self._list_link_to_parents(col_name="x")

    def y_coords(self):
        """Return a list of y-coordinates to use for plotting the tree."""

        # Format is a list with each node and its parent, separated by NaN values
        return self._list_link_to_parents(col_name="y")

    def extension_x_coords(self):
        """Return a list of x-coordinates to extend the tips of the tree."""

        # Format is a list with each node and its parent, separated by NaN values
        return self._list_link_to_tips(col_name="x")

    def extension_y_coords(self):
        """Return a list of y-coordinates to extend the tips of the tree."""

        # Format is a list with each node and its parent, separated by NaN values
        return self._list_link_to_tips(col_name="y")

    def text(self):
        """Return a list of leaf labels to use for plotting the tree."""

        # Format is a list with each node and its parent, separated by NaN values
        return self._list_link_to_parents(col_name="name")

    def _list_link_to_parents(self, col_name="x"):
        """Internal method for generating a list of values from self.df"""

        # col_name may only be x, y, or name
        assert col_name in ['x', 'y', 'name'], f"Not recognized: {col_name}"

        # Populate a list which will be output
        output_list = []

        # Iterate over each row
        for _, r in self.df.iterrows():

            # If there is no parent for this row
            if pd.isnull(r['parent']) or r['parent'] < 0:

                # Skip it
                continue

            # If there is a parent for this row
            else:

                # Add the item to the list
                output_list.append(r[col_name])

                # The value placed in between the node and its parent
                # depends on whether it is X or Y (or name)

                # Get the value for the parent
                parent_val = self.df.loc[r['parent'], col_name]

                # Moving along the x axis
                if col_name == "x":

                    # The intermediate node has the X coordinate of the parent
                    output_list.append(parent_val)

                # Moving along the y axis
                elif col_name == "y":

                    # The intermediate node has the Y coordinate of the child
                    output_list.append(r[col_name])

                # For the 'name' values
                elif col_name == "name":

                    # The intermediate node has no name
                    output_list.append(None)

                # Add its parent
                output_list.append(parent_val)

                # Add a NaN to separate it
                output_list.append(None)

        # Return the list
        return output_list

    def _list_link_to_tips(self, col_name="x"):
        """Internal method: make a list of coordinates to extend the tips of the tree."""

        # col_name may only be x or y
        assert col_name in ['x', 'y'], f"Not recognized: {col_name}"

        # Populate a list which will be output
        output_list = []

        # Iterate over each row
        for _, r in self.df.iterrows():

            # If this is not a leaf
            if not r['is_leaf']:

                # Skip it
                continue

            # If this is a tip
            else:

                # Add the item to the list
                output_list.append(r[col_name])

                # Moving along the x axis
                if col_name == "x":

                    # Extend the tip to the maximum x for the table
                    output_list.append(self.df[col_name].max())

                # Moving along the y axis
                elif col_name == "y":

                    # Extending the tip will keep the same y coordinate
                    output_list.append(r[col_name])

                # Add a NaN to separate it
                output_list.append(None)

        # Return the list
        return output_list

    def add_clade(self, clade, y_offset=0, x=0, parent=-1):
        """Add the node at the base of a clade, then add its children (if any)."""

        # Set up a numeric ID for this clade
        clade_id = len(self.positions)

        # Calculate the number of tips for this clade
        clade_n_tips = len(list(clade.tips(include_self=True)))

        # The Y position is based on the total number of tips, and the offset
        clade_y = y_offset + (clade_n_tips / 2.)

        # The position of this clade is in the middle of max_y and min_y
        self.positions.append(
            dict(
                name=clade.name,
                x=x,
                y=clade_y,
                parent=parent,
                is_leaf=clade_n_tips==1
            )
        )

        # For each child
        for child in clade.children:

            # Calculate the number of tips for this child
            child_n_tips = len(list(child.tips(include_self=True)))

            # Calculate the x position of the clade by adding
            # the distance to its parent
            child_x = x + clade.distance(child)

            # Add the child
            self.add_clade(
                child,
                y_offset=y_offset,
                x=child_x,
                parent=clade_id,
            )

            # The next child will be positioned above, based on the number of tips
            y_offset = y_offset + child_n_tips

##################
# SET UP LOGGING #
##################

# Set the level of the logger to INFO
logFormatter = logging.Formatter(
    '%(asctime)s %(levelname)-8s [gig-map] %(message)s'
)
logger = logging.getLogger('gig-map')
logger.setLevel(logging.INFO)

# Write to STDOUT
consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
logger.addHandler(consoleHandler)


###################
# PARSE ARGUMENTS #
###################

# Create the parser
parser = argparse.ArgumentParser(
    description='Display the distribution of annotated genes across microbial genomes'
)

# Add the arguments
parser.add_argument(
    '--host',
    type=str,
    default="localhost",
    help='Redis host used for reading alignment data'
)
parser.add_argument(
    '--port',
    type=int,
    default=6379,
    help='Redis port used for reading alignment data'
)
parser.add_argument(
    '--gene-annotations',
    type=str,
    default=None,
    help='(optional) Annotations for genes to use for plotting (must contain a column named `gene_id`)'
)
parser.add_argument(
    '--genome-annotations',
    type=str,
    default=None,
    help='(optional) Annotations for genomes to use for plotting (must contain a column named `genome_id`)'
)
parser.add_argument(
    '--settings',
    type=str,
    default=None,
    help='(optional) File containing initial settings for display'
)

# Parse the arguments
args = parser.parse_args()

# Read and format the data
data = read_data(args.__dict__)

# Define the menu items to be presented to the user
# The `menus` object is a list, which organizes the menus into tabs
menus = [
    # Second level is a dict, which defines the content of each menu tab
    # This example only has a single tab, but each additional dict
    # will add another tab to the menu display
    dict(
        # Label to be displayed at the top of the tab
        label="Customize Display",
        params=[
            # Filter alignments by a minimum percent identity (similarity)
            dict(
                # ID used to access the value of this menu item
                elem_id="minimum-pctid",
                # Define the type of menu item
                type="input",
                # Define the value type
                input_type="number",
                # Label displayed along this menu item
                label="Minimum Alignment Identity",
                # Default value
                value=90.,
            ),
            # Filter alignments by a minimum coverage percentage
            dict(
                elem_id="minimum-coverage",
                # Define the type of menu item
                type="input",
                # Define the value type
                input_type="number",
                # Label displayed along this menu item
                label="Minimum Alignment Coverage",
                # Default value
                value=90.,
            ),
            # Filter genomes by a minimum number of genes aligned
            dict(
                elem_id="minimum-genes-per-genome",
                type="input",
                input_type="number",
                label="Minimum Number of Genes to Display Genome",
                value=1,
            ),
            # Allow the user to color the genes by the
            # coverage or identity of the alignment, as well
            # as any additional user-provided metadata
            dict(
                elem_id="color-genes-by",
                label="Color Genes By",
                type="dropdown",
                options=data['available_gene_annotations'],
                value="pident",
            ),
            # Set up the labels for each gene
            dict(
                elem_id="label-genes-by",
                label="Label Genes By",
                type="dropdown",
                options=data['available_gene_labels'],
                value="",
            ),
            # Limit the length of each gene label
            dict(
                elem_id="max-gene-label-len",
                label="Maximum Gene Label Length",
                type="input",
                input_type="numeric",
                value=60,
                # Make sure that this option stays in the same column as the previous
                keep_with_previous=True
            ),
            # Set up the labels for each genome
            dict(
                elem_id="label-genomes-by",
                label="Label Genomes By",
                type="dropdown",
                options=data['available_genome_labels'],
                value="",
            ),
            # Limit the length of each genome label
            dict(
                elem_id="max-genome-label-len",
                label="Maximum Genome Label Length",
                type="input",
                input_type="numeric",
                value=60,
                # Make sure that this option stays in the same column as the previous
                keep_with_previous=True
            ),
            # Set the colorscale used for the heatmap
            dict(
                elem_id="heatmap-colorscale",
                label="Heatmap Color Scale",
                type="dropdown",
                options=[
                    dict(label=v, value=v)
                    for v in px.colors.named_colorscales()
                ],
                value="blues",
            ),
            # Set the width of the tree
            dict(
                elem_id="tree-width",
                label="Tree Width",
                type="slider",
                min_val=0.1,
                max_val=0.9,
                value=0.4,
                step=0.01,
            ),
            # Set the width of the figure
            dict(
                elem_id="figure-width",
                label="Figure Width",
                type="slider",
                min_val=200,
                max_val=2400,
                value=800,
                step=20,
            ),
            dict(
                elem_id="figure-height",
                label="Figure Height",
                type="slider",
                min_val=200,
                max_val=2400,
                value=650,
                step=20,
            ),
        ]
    ),
]

# Keep a list of params that were considered, but aren't currently being used
deprecated_menu_items = [
    # Show a heatmap or a t-SNE map
    dict(
        # ID used to access the value of this menu item
        elem_id="display-type",
        # Label displayed along this menu item
        label="Display Type",
        # Dropdown
        type="dropdown",
        # Available options
        options=[
            dict(
                label="Heatmap + Tree",
                value="heatmap"
            ),
            dict(
                label="t-SNE Map",
                value="tsne"
            ),
        ],
        # Default value
        value="heatmap"
    ),
    # Allow the user to set a title to the plot
    dict(
        # ID used to access the value of this menu item
        elem_id="plot-title",
        # Label displayed along this menu item
        label="Plot Title",
        # Free-form input box
        type="input",
        # Input must be a string
        input_type="string",
        # Default value
        value="",
    ),
]


@lru_cache(maxsize=1)
def get_mask(min_pctid, min_cov):

    # Compute the mask for which genes/genomes pass the filter
    return (data["alignments_pident"] >= min_pctid) & \
           (data["alignments_coverage"] >= min_cov)


# Generate a wide table of alignments based on minimum thresholds
def format_alignments_wide(min_pctid, min_cov, display_value):

    # The options for `display_value` are:
    #   pident
    #   coverage
    #   description
    #   mask (returns a bool for each cell reflecting the filter)
    assert display_value in ['pident', 'coverage', 'description', 'mask']

    # Compute the mask for which genes/genomes pass the filter
    # Using a subfunction allows us to cache the value to help with
    # multiple calls to the format_alignments_wide() function
    mask = get_mask(min_pctid, min_cov)

    # If that is all we need to return
    if display_value == "mask":

        # Return the DataFrame of bools
        return mask

    # Otherwise:
    else:

        # Format the key for the source data
        data_key = f"alignments_{display_value}"

        # Make sure that the key is valid
        assert data_key in list(data.keys())

        # Return the alignments which pass the filter
        return data[data_key].where(mask)


def plot_gig_map(_, selections):
    """Render the gig-map display based on the data and the user's menu selections."""

    # Render that figure
    return plot_gig_map_heatmap(selections)

    # DEPRECATED BEHAVIOR BELOW WAS TO SUPPORT T-SNE
    # # The two options for display are 'heatmap' and 'tnse'
    # assert selections["display-type"] in ['heatmap', 'tsne']

    # # If the user selected the option to display a heatmap + tree
    # if selections["display-type"] == "heatmap":

    #     # Render that figure
    #     return plot_gig_map_heatmap(selections)

    # # Otherwise
    # else:

    #     assert selections["display-type"] == 'tsne'

    #     # Render that figure
    #     return plot_gig_map_tsne(selections)

def get_gene_annot_values(selections):
    """Return a dict with the specified annotation for 'color-genes-by'."""

    # Make sure that the specified value is in the annotation table
    assert selections["color-genes-by"] in data["gene_annotations"].columns.values

    # Make a dict with numeric values
    value_dict = data[
        "gene_annotations"
    ][
        selections["color-genes-by"]
    ].apply(
        lambda v: pd.to_numeric(v, errors="coerce")
    ).dropna(
    ).to_dict()

    # Make sure that there are at least some numeric values
    msg = f"Column {selections['color-genes-by']} contains no numeric values"
    assert len(value_dict) > 0, msg

    return value_dict

def plot_gig_map_tsne(selections):
    """Render the t-SNE map display."""

    # Read the t-SNE coordinates
    tsne = data["tsne"]

    # If there are gene annotations
    if "gene_annotations" in data:

        # For all of the possible annotations
        for col_name, col_values in data["gene_annotations"].items():

            # Add the values as a column to the table to display
            tsne = tsne.assign(
                **{
                    col_name: col_values.apply(
                        # Limit the length of each label, if the label is a string
                        lambda v: v[:selections["max-gene-label-len"]] if isinstance(v, str) else v
                    )
                }
            )

    # Genes cannot be colored by genome-specific alignment data
    # If the user has selected another piece of metadata to color by
    if selections["color-genes-by"] not in [None, "pident", "coverage"]:

        # Set the name of the column to use for colors
        color_by_column=selections['color-genes-by']

    else:

        # Set a null value for the color_by_column
        color_by_column = None

    fig = px.scatter(
        data_frame=tsne.reset_index(),
        x='t-SNE 1',
        y='t-SNE 2',
        hover_name='index',
        color=color_by_column,
        hover_data=tsne.columns.values
    )

    # Set up the layout
    fig.update_layout(
        # White background
        paper_bgcolor='white',
        plot_bgcolor='white',
        # Figure height and width
        height=selections['figure-height'],
        width=selections['figure-width'],
    )

    return fig


def plot_gig_map_heatmap(selections):
    """Render the heatmap + tree display."""

    # Format a wide table with gene alignments
    # If the user wants to display alignment stats
    if selections["color-genes-by"] in ["pident", "coverage"]:

        # Make a table with the alignment stats
        plot_df = format_alignments_wide(
            selections["minimum-pctid"],
            selections["minimum-coverage"],
            selections["color-genes-by"]
        )

    # Otherwise, the user wants to color by gene annotation
    else:

        # Get the values for each gene as a dict
        value_dict = get_gene_annot_values(selections)

        # Start with a table filtered by alignment characteristics, and filled in with True/False
        plot_df = format_alignments_wide(
            selections["minimum-pctid"],
            selections["minimum-coverage"],
            "mask"
        # Now replace any non-null value (for which an alignment is present) with the annotation
        ).replace(
            to_replace={
                gene_name: {
                    True: gene_value,
                    False: None
                }
                for gene_name, gene_value in value_dict.items()
            }
        )

    # Drop any genomes which don't have the minimum number of alignments
    plot_df = plot_df.loc[
        plot_df.notnull().sum(axis=1) >= selections["minimum-genes-per-genome"]
    ]

    # Drop any genes which don't have any alignments
    plot_df = plot_df.loc[
        :,
        plot_df.notnull().sum() > 0
    ]

    # Make sure that there are at least two genomes with alignments
    assert plot_df.shape[0] > 1, "<=1 genome with alignments passing filter"

    # Make a table with the text descriptions of each alignment
    text_df = format_alignments_wide(
        selections["minimum-pctid"],
        selections["minimum-coverage"],
        "description"
    ).reindex(
        index=plot_df.index.values,
        columns=plot_df.columns.values,
    ).fillna(
        "No alignments found"
    )

    # Create a tree using the set of genomes which contain alignments
    node_positions = make_nj_tree(plot_df.index.values, data['distances'])

    # The figure will render with a dendrogram on the left and a heatmap on the right

    # Set up a base level figure
    fig = go.Figure()

    # Render the tree with multiple traces
    for trace in plot_tree(
        node_positions,
        selections,
        data,
        xaxis="x",  # Primary X axis
        yaxis="y",  # Primary Y axis
    ):
        fig.add_trace(
            trace
        )

    # Render the heatmap
    fig.add_trace(
        plot_heatmap(
            dict(
                values=plot_df,
                text=text_df
            ),
            node_positions,
            selections,
            data,
            xaxis="x2",  # Secondary X axis
            yaxis="y",   # Primary Y axis
        )
    )

    # Render the colorbar
    fig.add_trace(
        plot_colorbar(
            min_val=plot_df.fillna(100).min().min(),
            max_val=plot_df.fillna(0).max().max(),
            color_genes_by=selections["color-genes-by"],
            label={
                i['value']: i['label']
                for i in data["available_gene_annotations"]
            }[
                selections["color-genes-by"]
            ],
            colorscale=selections["heatmap-colorscale"],
            xaxis="x3",  # Tertiary X axis
            yaxis="y2",  # Secondary Y axis
        )
    )

    # Set up the labels for the genomes to add to the axis
    genome_labels = list(node_positions.genome_order)

    # If the user elected to label the genomes by something other than their ID
    if selections["label-genomes-by"] != "":

        # Map the labels to the values from the annotation table
        genome_labels = list(map(
            data["genome_annotations"][selections["label-genomes-by"]].get,
            genome_labels
        ))

    # Set up the layout
    fig.update_layout(
        # Set up the primary x-axis (with the tree)
        xaxis=dict(
            title_text="Genome Distance (ANI)",
            domain=[0, selections["tree-width"]],
            range=[
                node_positions.df['x'].max() * -0.01,
                node_positions.df['x'].max() * 1.01,
            ]
        ),
        # Primary y-axis (with the tree)
        yaxis=dict(
            tickmode="array",
            tickvals=list(range(len(genome_labels))),
            ticktext=[
                l[:selections["max-genome-label-len"]]
                for l in genome_labels
            ],
            side="right",
            anchor="x3",
            showticklabels=True,
            domain=[0, 0.9]
        ),
        # Secondary y-axis (with the colorbar)
        yaxis2=dict(
            anchor="x2",
            showticklabels=True,
            domain=[0.91, 1.0]
        ),
        # Secondary x-axis (with the heatmap),
        xaxis2=dict(
            domain=[selections["tree-width"], 1.0],
        ),
        # Tertiary x-axis (with the colorbar),
        xaxis3=dict(
            domain=[selections["tree-width"], 1.0],
            anchor="y2",
            side="top",
        ),
        paper_bgcolor='white',
        plot_bgcolor='white',
        # Figure height and width
        height=selections['figure-height'],
        width=selections['figure-width'],
    )

    return fig

# If the user provided initial settings
if args.settings is not None:

    # Make sure that the string points to a file
    assert os.path.exists(args.settings)

    # Read in the file as JSON
    with open(args.settings, 'r') as handle:

        initial_settings = json.load(handle)

# Otherwise
else:

    # There are no initial settings
    initial_settings = None

# Instantiate the MenuDrivenFigure object
mdf = MenuDrivenFigure(
    data=data,
    menus=menus,
    function=plot_gig_map,
    title="Genes in Genomes Map",
    initial_settings=initial_settings
)

# Launch the Dash/Flask app
mdf.run_server(
    host='0.0.0.0',
    port=8080,
    debug=True,
)