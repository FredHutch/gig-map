#!/usr/bin/env python3

# Import the menu-driven-figure library
from menu_driven_figure.app import MenuDrivenFigure

import argparse
from dash import callback_context as ctx
from dash.exceptions import PreventUpdate
from dash.dependencies import Input, Output, State, ALL
import dash_bootstrap_components as dbc
import dash_core_components as dcc
import dash_html_components as html
from datetime import datetime
from functools import lru_cache
import json
import logging
import os
import plotly.graph_objects as go
from plotly import colors
import traceback

# Helper functions
from helpers import empty_plot
from helpers import filter_alignments
from helpers import plot_tree
from helpers import read_data
from helpers import read_genome_groups
from helpers import render_gig_map_heatmap
from cartesian_tree import get_node_positions


def make_colormap(value_list, colorscale):
    # Adjust the range of values from 0 to 1
    norm_values = value_list.copy()
    norm_values.sort()
    norm_values = norm_values - norm_values.min()
    norm_values = norm_values / norm_values.max()
    return dict(
        zip(
            value_list,
            colors.sample_colorscale(
                colorscale,
                norm_values,
            )
        )
    )


def format_heatmap_rectangle(
    r,
    xaxis=None,
    yaxis=None,
):
    """Format a single rectangle in the heatmap."""
    return go.Scatter(
        x=[
            r.x - 0.5,
            r.x - 0.5,
            r.x + 0.5,
            r.x + 0.5,
        ],
        y=[
            r.y - 0.5,
            r.y + 0.5,
            r.y + 0.5,
            r.y - 0.5,
        ],
        fill="toself",
        hovertext=r.description,
        fillcolor=r.color,
        xaxis=xaxis,
        yaxis=yaxis,
        showlegend=False,
        mode="none",
    )


##################
# SET UP LOGGING #
##################

# Set the level of the logger to INFO
logFormatter = logging.Formatter(
    '%(asctime)s %(levelname)-8s [gig-map] %(message)s'
)
logger = logging.getLogger('gig-map')
logger.setLevel(logging.INFO)

# Write to STDOUT
consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
logger.addHandler(consoleHandler)


###################
# PARSE ARGUMENTS #
###################

# Create the parser
parser = argparse.ArgumentParser(
    description='Display the distribution of annotated genes across microbial genomes'
)

# Add the arguments
parser.add_argument(
    '--host',
    type=str,
    default="localhost",
    help='Redis host used for reading alignment data'
)
parser.add_argument(
    '--port',
    type=int,
    default=6379,
    help='Redis port used for reading alignment data'
)
parser.add_argument(
    '--gene-annotations',
    type=str,
    default=None,
    help='(optional) Annotations for genes to use for plotting (must contain a column named `gene_id`)'
)
parser.add_argument(
    '--genome-annotations',
    type=str,
    default=None,
    help='(optional) Annotations for genomes to use for plotting (must contain a column named `genome_id`)'
)
parser.add_argument(
    '--color-genes-by',
    type=str,
    default=None,
    help='(optional) Indicate a column from the gene annotation table to use for coloring genes'
)
parser.add_argument(
    '--settings',
    type=str,
    default=None,
    help='(optional) File containing initial settings for display'
)

# Parse the arguments
args = parser.parse_args()

# Read and format the data
data = read_data(args.__dict__)

# Define the menu items to be presented to the user

# The `header_menu` object is a list which defines the
# menu items which will be presented immediately above
# the displayed figure (instead of being hidden in a menu)
header_menu = [
    # Use either ANI or a marker gene to group genomes
    dict(
        # ID used to access the value of this menu item
        elem_id="clustering-method",
        # Define the type of menu item
        type="dropdown",
        # Define the options in the dropdown
        options=[
            dict(
                value="ani",
                label="Whole-Genome Average Nucleotide Identity (ANI)",
            )
        ] + [
            dict(
                value=marker_gene,
                label=marker_gene
            )
            for marker_gene in data["marker_genes"]
        ],
        # Default value
        value="ani",
        # Label displayed along this menu item
        label="Cluster Genomes By"
    ),
    # The distance threshold used to group genomes
    dict(
        # ID used to access the value of this menu item
        elem_id="ani-threshold",
        # Define the type of menu item
        type="dropdown",
        # Define the options in the dropdown
        options=[
            dict(
                value=v,
                label=f"{int(v)}% Identity",
            )
            for v in data["genome_group_thresholds"]
        ] + [
            dict(
                value='None',
                label="No Grouping"
            )
        ],
        # Default value
        value="None",
        # Suffix to display
        suffix="%",
        # Label displayed along this menu item
        label="Genome Group Clustering Threshold",
    ),
    # Allow the user to color the genes by the
    # coverage or identity of the alignment, as well
    # as any additional user-provided metadata
    dict(
        elem_id="color-genes-by",
        label="Color Genes By",
        type="dropdown",
        options=data['available_gene_annotations'],
        value="pident",
    ),
]

# The `menus` object is a list, which organizes the menus into tabs
menus = [
    # Second level is a dict, which defines the content of each menu tab
    # This example only has a single tab, but each additional dict
    # will add another tab to the menu display
    dict(
        # Label to be displayed at the top of the tab
        label="Customize Display",
        params=[
            # The maximum number of genome groups to display
            dict(
                # ID used to access the value of this menu item
                elem_id="max-n-groups",
                # Define the type of menu item
                type="input",
                # Define the value type
                input_type="number",
                # Label displayed along this menu item
                label="Maximum Number of Genome Groups to Display",
                # Default value
                value=30,
            ),
            # The maximum number of genomes to display
            dict(
                # ID used to access the value of this menu item
                elem_id="max-n-genomes",
                # Define the type of menu item
                type="input",
                # Define the value type
                input_type="number",
                # Label displayed along this menu item
                label="Maximum Number of Genomes to Display",
                # Default value
                value=200,
            ),
            # Filter alignments by a minimum percent identity (similarity)
            dict(
                # ID used to access the value of this menu item
                elem_id="minimum-pctid",
                # Define the type of menu item
                type="input",
                # Define the value type
                input_type="number",
                # Label displayed along this menu item
                label="Minimum Alignment Identity",
                # Default value
                value=90.,
            ),
            # Filter alignments by a minimum coverage percentage
            dict(
                elem_id="minimum-coverage",
                # Define the type of menu item
                type="input",
                # Define the value type
                input_type="number",
                # Label displayed along this menu item
                label="Minimum Alignment Coverage",
                # Default value
                value=90.,
            ),
            # Filter genomes by a minimum number of genes aligned
            dict(
                elem_id="minimum-genes-per-genome",
                type="input",
                input_type="number",
                label="Minimum Number of Genes to Display Genome",
                value=10,
            ),
            # Filter genes by a minimum number of genomes aligned
            dict(
                elem_id="minimum-genomes-per-gene",
                type="input",
                input_type="number",
                label="Minimum Number of Genomes to Display Gene",
                value=2,
            ),
            # Set up the labels for each gene
            dict(
                elem_id="label-genes-by",
                label="Label Genes By",
                type="dropdown",
                options=data["available_gene_labels"],
                value="combined_name" if (data["gene_annotations"] is not None and "combined_name" in data["gene_annotations"].columns.values) else "",
            ),
            # Limit the length of each gene label
            dict(
                elem_id="max-gene-label-len",
                label="Maximum Gene Label Length",
                type="input",
                input_type="numeric",
                value=60,
                # Make sure that this option stays in the same column as the previous
                keep_with_previous=True
            ),
            # Set up the labels for each genome
            dict(
                elem_id="label-genomes-by",
                label="Label Genomes By",
                type="dropdown",
                options=data['available_genome_labels'],
                value="Formatted Name" if (data["genome_annotations"] is not None and "Formatted Name" in data["genome_annotations"].columns.values) else "",
            ),
            # Limit the length of each genome label
            dict(
                elem_id="max-genome-label-len",
                label="Maximum Genome Label Length",
                type="input",
                input_type="numeric",
                value=60,
                # Make sure that this option stays in the same column as the previous
                keep_with_previous=True
            ),
            # Set the colorscale used for the heatmap
            dict(
                elem_id="heatmap-colorscale",
                label="Heatmap Color Scale",
                type="dropdown",
                options=[
                    dict(label=v, value=v)
                    for v in colors.named_colorscales()
                ],
                value="blues",
            ),
            # Set the width of the tree
            dict(
                elem_id="tree-width",
                label="Tree Width",
                type="slider",
                min_val=0.1,
                max_val=0.9,
                value=0.4,
                step=0.01,
            ),
            # Set the width of the figure
            dict(
                elem_id="figure-width",
                label="Figure Width",
                type="slider",
                min_val=200,
                max_val=2400,
                value=1200,
                step=20,
            ),
            dict(
                elem_id="figure-height",
                label="Figure Height",
                type="slider",
                min_val=200,
                max_val=2400,
                value=1000,
                step=20,
            ),
        ]
    ),
]

# Keep a list of params that were considered, but aren't currently being used
deprecated_menu_items = [
    # Show a heatmap or a t-SNE map
    dict(
        # ID used to access the value of this menu item
        elem_id="display-type",
        # Label displayed along this menu item
        label="Display Type",
        # Dropdown
        type="dropdown",
        # Available options
        options=[
            dict(
                label="Heatmap + Tree",
                value="heatmap"
            ),
            dict(
                label="t-SNE Map",
                value="tsne"
            ),
        ],
        # Default value
        value="heatmap"
    ),
    # Allow the user to set a title to the plot
    dict(
        # ID used to access the value of this menu item
        elem_id="plot-title",
        # Label displayed along this menu item
        label="Plot Title",
        # Free-form input box
        type="input",
        # Input must be a string
        input_type="string",
        # Default value
        value="",
    ),
]


@lru_cache(maxsize=16)
def filter_alignments_cached(
    clustering_method,
    ani_threshold,
    selected_group,
    max_n_genomes,
    min_pctid,
    min_cov,
    min_genes_per_genome,
    min_genomes_per_gene,
):
    """
    Filter the alignments for genomes in the selected group
    based on pident, coverage, and the number of genes aligned per genome.
    """

    # Get the logger
    logger = logging.getLogger('gig-map')
    logger.info(f"Method for grouping genomes: {clustering_method}")
    logger.info(f"Grouping Threshold: {ani_threshold}")
    logger.info(f"Selected Group: {selected_group}")
    logger.info(f"Max Genomes: {max_n_genomes}")
    logger.info(f"Minimum Percent Identity: {min_pctid}")
    logger.info(f"Minimum Coverage: {min_cov}")
    logger.info(f"Minimum Genes per Genome: {min_genes_per_genome}")
    logger.info(f"Minimum Genomes per Gene: {min_genomes_per_gene}")

    # Filter the alignmnets using the function imported from helpers.py
    # The reason that we wrap this imported function within the _cached
    # function is so that we can apply the lru_cache decorator, while using
    # the `data` object which is present in the global namespace
    return filter_alignments(
        data=data,
        clustering_method=clustering_method,
        ani_threshold=ani_threshold,
        selected_group=selected_group,
        max_n_genomes=max_n_genomes,
        min_pctid=min_pctid,
        min_cov=min_cov,
        min_genes_per_genome=min_genes_per_genome,
        min_genomes_per_gene=min_genomes_per_gene,
    )


def plot_genome_group_overview(_, selections):
    """Render the genome overview display."""

    # Get the logger
    logger = logging.getLogger('gig-map')

    clustering_method = selections["clustering-method"]
    ani_threshold = selections["ani-threshold"]

    # If "No Grouping" has been selected for ANI threshold
    if ani_threshold == "None":

        # Return an empty plot
        return empty_plot()

    # Otherwise, a threshold has been selected for grouping genomes

    # Get the genome groups based on this ANI threshold
    # for this particular distance method (ANI vs. marker genes)
    logger.info(f"Plotting groups at {ani_threshold} percent identity")
    genome_groups = read_genome_groups(
        data,
        clustering_method,
        ani_threshold
    )

    # If the whole-genome ANI method is used
    if clustering_method == "ani":

        # A summary of each genome group
        genome_group_df = data[f"genome_group_df {ani_threshold}"]
        
        # The mean ANI between groups
        group_distance_df = data[f"group_distance_df {ani_threshold}"]

    # If a marker gene was selected
    else:
        
        # A summary of each genome group
        genome_group_df = data[
            "marker_gene_groups"
        ][
            clustering_method
        ][
            ani_threshold
        ][
            "genome_group_df"
        ]
        
        # The mean ANI between groups
        group_distance_df = data[
            "marker_gene_groups"
        ][
            clustering_method
        ][
            ani_threshold
        ][
            "group_distance_df"
        ]

    # If there is only one group
    if genome_groups.unique().shape[0] <= 1:

        # Return an empty plot
        return empty_plot()

    # Apply the maximum number of groups to display
    groups_to_plot = genome_group_df.head(
        selections["max-n-groups"]
    ).index.values
    group_distance_df = group_distance_df.reindex(
        index=groups_to_plot,
        columns=groups_to_plot
    )

    # Set the diagonal to zero and make symmetric
    for i in range(group_distance_df.shape[0]):
        group_distance_df.iloc[i, i] = 0
        for j in range(i):
            group_distance_df.iloc[i, j] = group_distance_df.iloc[j, i]

    # Get the positions of the nodes in the tree
    group_node_positions = get_node_positions(
        group_distance_df,
        y_offset=-0.5,
    )

    # Each group should be specified as an integer
    group_node_positions.genome_order = list(map(
        lambda i: int(float(i)),
        group_node_positions.genome_order
    ))

    # Set up a base level figure
    fig = go.Figure()

    # Render the tree with multiple traces
    logger.info("Plotting tree")
    for trace in plot_tree(
        data,
        group_node_positions,
        selections,
        xaxis="x",  # Primary X axis
        yaxis="y",  # Primary Y axis
        try_relabel=False,
    ):
        fig.add_trace(
            trace
        )

    # Set up the labels for the genome groups to add to the axis
    genome_labels = [
        "Group #{} ({:,} {}, {:,} genes)".format(
            group_ix,
            genome_group_df.loc[group_ix, "n_genomes"],
            "genome" if genome_group_df.loc[group_ix, "n_genomes"] == 1 else "genomes",
            genome_group_df.loc[group_ix, "n_genes"],
        )
        for group_ix in map(int, group_node_positions.genome_order)
    ]

    # Set up the label which will be used underneath the tree
    if clustering_method == "ani":
        tree_xaxis_label = "Genome Distance<br>(ANI)"
    else:
        tree_xaxis_label = f"Marker Distance<br>({clustering_method})"

    # Set up the layout
    logger.info("Updating layout")
    fig.update_layout(
        # Set up the primary x-axis (with the tree)
        xaxis=dict(
            title_text=tree_xaxis_label,
        ),
        # Primary y-axis (with the tree)
        yaxis=dict(
            tickmode="array",
            tickvals=list(range(len(genome_labels))),
            ticktext=genome_labels,
            side="right",
            showticklabels=True,
        ),
        paper_bgcolor='white',
        plot_bgcolor='white',
        # Figure height and width
        height=(group_distance_df.shape[0] * 25) + 150,
        width=650,
    )

    logger.info("Rendering plot")

    return fig


def plot_gig_map_heatmap(selected_group, selections):
    """Render the heatmap + tree display."""

    # Get the logger
    logger = logging.getLogger('gig-map')

    # Filter the alignments using the thresholds set by the user
    logger.info("Filtering alignments")
    plot_df = filter_alignments_cached(
        selections["clustering-method"],
        selections["ani-threshold"],
        selected_group,
        selections["max-n-genomes"],
        selections["minimum-pctid"],
        selections["minimum-coverage"],
        selections["minimum-genes-per-genome"],
        selections["minimum-genomes-per-gene"]
    )

    # Call the wrapper function to return a go.Figure
    return render_gig_map_heatmap(
        data,
        plot_df,
        selections,
        selected_group

    )


def add_callbacks(app):
    """Decorate the callback needed to render the heatmap display."""

    @app.callback(
        Output("selected_group", "children"),
        [
            Input("genome-group-tree", "clickData"),
            Input({"menu": ALL, "elem": "redraw-button"}, "n_clicks"),
            Input({"menu": ALL, "elem": "close-button"}, "n_clicks"),
        ],
        [
            State({"input_elem": "clustering-method"}, "value"),
            State({"input_elem": "ani-threshold"}, "value"),
            State("selected_group", "children")
        ]
    )
    def save_selected_genome_group(
        clickData,
        trigger_redraw,
        trigger_close_and_redraw,
        clustering_method,
        ani_threshold,
        prev_selected_group
    ):
        """Keep track of which genome group is being viewed."""

        # Get the logger
        logger = logging.getLogger('gig-map')

        # If there is no selected group in the browser (initial load)
        if prev_selected_group is None:

            # Then just fill in None for each value
            prev_clustering_method = None
            prev_ani_threshold = None
            prev_selected_group = None

        # Otherwise
        else:

            # Get the previously selected group and ani_threshold from the browser
            prev_clustering_method, prev_ani_threshold, prev_selected_group = prev_selected_group

        # Get the element which triggered the callback
        trigger = ctx.triggered[0]['prop_id']

        # If the user clicked on the tree
        if trigger == "genome-group-tree.clickData":

            # The clickData must be a dict with a particular format
            assert isinstance(clickData, dict)
            assert("points" in clickData)
            assert(isinstance(clickData["points"], list))
            assert(len(clickData["points"]) == 1)
            assert(isinstance(clickData["points"][0], dict))
            assert("text" in clickData["points"][0])
            assert(clickData["points"][0]["text"] is not None)

            # Parse the group which they clicked on
            selected_group = int(float(
                clickData["points"][0]["text"]
            ))
            logger.info(f"Selected group: {selected_group}")

            # If this is the same group which was previously selected
            if selected_group == prev_selected_group:

                # Do not return a callback
                raise PreventUpdate

            # Otherwise, update the `selected_group` element
            return [clustering_method, ani_threshold, selected_group]

        # Otherwise, the user must have triggered a redraw of the figure
        # Or this is the first time we have loaded the page, either way
        else:

            # If the clustering method and the ANI threshold did not change
            if prev_ani_threshold == ani_threshold and prev_clustering_method == clustering_method:

                # Do not return a value from the callback
                raise PreventUpdate

            # Otherwise, the updated group should be 0
            selected_group = 0
            
            # Update the `selected_group` element
            return [clustering_method, ani_threshold, selected_group]

    @app.callback(
        [
            Output("gig-heatmap", "figure"),
            Output(f"gig-heatmap-toast", "is_open"),
            Output(f"gig-heatmap-toast", "children"),
            Output("plotted-settings", "children")
        ],
        [
            Input("selected_group", "children"),
            Input({"menu": ALL, "elem": "redraw-button"}, "n_clicks"),
            Input({"menu": ALL, "elem": "close-button"}, "n_clicks"),
            Input({"menu": ALL, "elem": "open-button"}, "n_clicks"),
            Input("current-settings", "children"),
        ],
        [
            State("plotted-settings", "children")
        ]
    )
    def heatmap_callback(
        selected_group,
        redraw_clicks,
        close_clicks,
        open_clicks,
        selected_params,
        previously_selected_params
    ):

        # If no group has been selected
        if selected_group is None:

            # Do not render the plot
            logger.info("Cannot render heatmap, stopping")
            raise PreventUpdate

        # Otherwise, a group has been selected

        # Parse both the ANI and selected group from the inputs
        clustering_method, ani_threshold, selected_group = selected_group

        logger.info(f"Selected clustering method: {clustering_method}")
        logger.info(f"Selected group for heatmap: {selected_group}")
        logger.info(f"Selected ANI threshold for heatmap: {ani_threshold}")

        # Get the element which triggered the callback
        trigger = ctx.triggered[0]['prop_id']

        logger.info(f"Trigger: {trigger}")

        # If no plot has been made before
        if previously_selected_params is None:

            # Then let's go ahead and redraw the figure, since this
            # callback must have been triggered by the default
            # parameters loading
            logger.info("Initial load -- plotting")
            pass

        # Otherwise
        else:

            # If this was triggered by the user clicking "Close and Redraw",
            #  or if a new group was selected
            if "close-button" in trigger or "redraw-button" in trigger or "selected_group" in trigger:

                # Then we will redraw the figure
                pass

            # Otherwise
            else:

                # Do not redraw the figure
                logger.info("No redraw button was pressed -- preventing callback")
                raise PreventUpdate

        # Parse the parameters from the serialized JSON
        selected_params = json.loads(selected_params)

        # Overwrite the ANI threshold using the value from the browser
        # This is intended to prevent race conditions from other callbacks
        selected_params["clustering-method"] = clustering_method
        selected_params["ani-threshold"] = ani_threshold

        # Try to render the figure
        try:

            # Generate a figure object
            fig = plot_gig_map_heatmap(selected_group, selected_params)

            # If everything went well, just show the figure
            return fig, False, None, json.dumps(selected_params)

        # If there was an error
        except Exception as e:

            # Format a message to display
            msg = f"Unable to render -- {e}"
            logger.info(f"Encountered error: {e}")
            logger.info(traceback.format_exc())

            # Show an empty figure, and open the notification
            return empty_plot(), True, msg, json.dumps(selected_params)

    @app.callback(
        [
            Output("download-html", "data"),
            Output("download-html-toast", "is_open"),
            Output("download-html-toast", "children"),
            Output("download-html-button", "style"),
        ],
        [
            Input("download-html-button", "n_clicks")
        ],
        [
            State("selected_group", "children"),
            State("current-settings", "children"),
        ]
    )
    def download_html(n_clicks, selected_group, selected_params):
        # If the button has not been clicked
        if n_clicks is None:

            # Take no action
            raise PreventUpdate

        # Otherwise
        # If no group has been selected
        if selected_group is None:

            # Do not render the plot
            logger.info("Cannot render heatmap, stopping")
            raise PreventUpdate

        # Otherwise, a group has been selected

        # Parse both the ANI and selected group from the inputs
        clustering_method, ani_threshold, selected_group = selected_group

        logger.info(f"Selected clustering method: {clustering_method}")
        logger.info(f"Selected group for heatmap: {selected_group}")
        logger.info(f"Selected ANI threshold for heatmap: {ani_threshold}")

        # Get the element which triggered the callback
        trigger = ctx.triggered[0]['prop_id']

        logger.info(f"Trigger: {trigger}")

        # Parse the parameters from the serialized JSON
        selected_params = json.loads(selected_params)

        # Overwrite the ANI threshold using the value from the browser
        # This is intended to prevent race conditions from other callbacks
        selected_params["clustering-method"] = clustering_method
        selected_params["ani-threshold"] = ani_threshold

        # Try to render the figure
        try:

            # Generate a figure object
            fig = plot_gig_map_heatmap(selected_group, selected_params)

        # If there was an error
        except Exception as e:

            # Format a message to display
            msg = f"Unable to render -- {e}"
            logger.info(f"Encountered error: {e}")
            logger.info(traceback.format_exc())

            # Show an empty figure, and open the notification
            return dict(content=traceback.format_exc(), filename="error.txt"), True, msg, {}

        # At this point, the figure has been rendered

        # Format the filename
        now = datetime.now() # current date and time
        filename = now.strftime("gig-map-%Y-%m-%d-%H-%M-%S.html")

        # Save it to HTML
        fig.write_html(filename, include_plotlyjs="cdn")

        # Download the file
        return dcc.send_file(filename), False, "", {}

    @app.callback(
        Output("gene-annot-display", "children"),
        [
            Input("select-gene-annot-display", "value")
        ]
    )
    def display_gene_annot(gene_id):
        if gene_id is None:
            return ""
        elif data["gene_annotations"] is None:
            return ""
        elif gene_id not in data["gene_annotations"].index.values:
            return "Annotation not found"
        else:
            return "\n".join([
                f" - {k}: {v}"
                for k, v in data["gene_annotations"].loc[gene_id].items()
            ])


# If the user provided initial settings
if args.settings is not None:

    # If the string points to a file
    if os.path.exists(args.settings):

        # Read in the file as JSON
        with open(args.settings, 'r') as handle:

            initial_settings = json.load(handle)

# Otherwise
else:

    # There are no initial settings
    initial_settings = dict()

# If the user specified --color-genes-by
if args.color_genes_by is not None:

    # Add that to the initial settings
    initial_settings["color-genes-by"] = args.color_genes_by

# Define a button which can be used to download HTML
gigmap_footer = [
    dbc.Spinner(
        dbc.Button(
            "Render HTML",
            id="download-html-button"
        )
    ),
    dcc.Download(
        id="download-html"
    ),
    dbc.Toast(
        header="Download HTML",
        id="download-html-toast",
        dismissable=True,
        is_open=False,
        style=dict(
            position="fixed",
            top=100,
            right=10,
            width=350,
            zIndex=10,
        )
    ),
    html.Br(),
    dcc.Dropdown(
        id="select-gene-annot-display",
        options=[
            dict(
                label=data["gene_ix"][gene_id],
                value=data["gene_ix"][gene_id]
            )
            for gene_id in data["alignments"].gene_ix.unique()
        ]
    ),
    html.Br(),
    dcc.Markdown(
        id="gene-annot-display"
    )
]

# Instantiate the MenuDrivenFigure object
mdf = MenuDrivenFigure(
    data=data,
    menus=menus,
    header_menu=header_menu,
    param_menu_ncols=3,
    function=plot_genome_group_overview,
    # Set up two distinct plots
    figures=["genome-group-tree", "gig-heatmap"],
    # Add a hidden Div for the selected genome group
    state_variables=["selected_group", "plotted-settings"],
    title="Genes in Genomes Map",
    initial_settings=initial_settings,
    footer_div=gigmap_footer
)

# Decorate additional callbacks
add_callbacks(mdf.app)

# Launch the Dash/Flask app
mdf.run_server(
    host='0.0.0.0',
    port=8080,
    debug=True,
)